//INCLUSAO DE BIBLIOTECAS
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <string.h>

//DEFINICAO DO DISPLAY
#define endereco 0x27
#define colunas 16
#define linhas 2

//DEFINICAO DOS RELES
#define releSirene 12
#define releBomba 13


//INSTANCIANDO O OBJETO
LiquidCrystal_I2C lcd(endereco, colunas, linhas);
byte pinosLinhas[] = { 0, 8, 2, 3 };
byte pinosColunas[] = { 4, 5, 6, 7 };
char teclas[4][4] = { { '1', '2', '3', 'A' },
                      { '4', '5', '6', 'B' },
                      { '7', '8', '9', 'C' },
                      { '*', '0', '#', 'D' } };

Keypad teclado1 = Keypad(makeKeymap(teclas), pinosLinhas, pinosColunas, 4, 4);

// Definição dos pinos

const int ledAmarelo = 9;   // Pino para led Azul
const int ledVerd = 10;     // Pino para led Verde
const int ledVerm = 11;     // Pino para led Vermelho
const int botaoVerm = 16;   // Pino para o botao Vermelho  GAME
const int botaoVerd = 15;   // Pino A3 para o botao Verde  GAME
const int buzzerPino = 17;  // Pino para o Buzzer
/*const int botaoVerm = 2;      // Pino para o botao Vermelho  GAME
const int botaoVerd = 3;      // Pino para o botao Verde  GAME
const int botaoPreto = 4;     // Pino para o botao Preto  MENU Padrao
const int botaoVermelho = 5;  // Pino para o botao Vermelho  MENU Conquista
const int botaoIni = 6;       // Pino para o botao Iniciar  MENU*/

// Variáveis
//int modoJogo = 0;  // botao Preto: Modo Padrão, botao Vermelho: Modo Conquista
int timeAContador = 0;
int timeBContador = 0;
int melody1[] = { 262, 294, 330, 349, 392, 440, 494, 523 };  //melodia 1 ct
int noteDuration1 = 200;                                     //melodia 1 ct
int minutos = 0;                                             //contar minutos da partida
int segundos = 0;                                            //contar segundos da partida
int decimas = 0;                                             //contar decimais da partida
long milisegundos = 0;                                       //variavel para a funcao millis
int valorTempoJogo = 0;                                      //tempo maximo que o usuario digitou para o game
int valorTempoBomba = 0;                                     //tempo para a bomba explodir MODE PADRAO
int senha = 123;                                             //Senha fixa para ativar bomba --futuramente será dinâmico
int senhaAtiva = 0;                                          //senha para ativar bomba
int senhaDesativa = 0;                                       //senha para desativar bomba
unsigned long tempoJogo = 0;                                 // PARA CALCULAR O TEMPO DO GAME
unsigned long tempoInicioJogo = 0;                           // PARA CALCULAR O TEMPO DO GAME
unsigned long tempoUltimaAtualizacao = 0;                    // PARA CALCULAR O TEMPO DO GAME
unsigned long tempoInicio = 0;                               //PADRAO
unsigned long tempoInicio1 = 0;                              //CONQUISTA time A
unsigned long tempoInicio2 = 0;                              //CONQUISTA time B
unsigned long duracaoPressao1 = 0;                           //CONQUISTA time A
unsigned long duracaoPressao2 = 0;                           //CONQUISTA time B
unsigned long resulVerm = 0;                                 //CONQUISTA resultado do vermelho
unsigned long resulVerd = 0;                                 //CONQUISTA resultado do verde
unsigned long duracaoPressao = 0;                            //PADRAO
unsigned long tempoBomba = 0;                                //PADRAO
unsigned long tempoinicioBomba = 0;                          //PADRAO
unsigned long tempoLed = 0;
unsigned long buzzerMenu = 0;      //Para fazer o buzzer dar sinal no menu
unsigned long tempoMillisLcd = 0;  //para contar corretamente o tempo que o lcd apagara
bool buzzerEstado = LOW;           //Para ativar ou desativar o buzzer do menu
bool dispositivoAtivado = false;
bool botaoPressionado = false;   //para calcular o tempo que o terror manteve o botao pressionado PADRAO
bool botaoPressionado1 = false;  //para calcular o tempo que o time A manteve o botao pressionado CONQUISTA
bool botaoPressionado2 = false;  //para calcular o tempo que o time B manteve o botao pressionado CONQUISTA
bool estadoLed = LOW;
char tecla_pressionada;  //para fazer leitura da tecla pressionada do teclado

void setup() {
  lcd.init();       // INICIA A COMUNICAÇÃO COM O DISPLAY
  lcd.backlight();  // LIGA A ILUMINAÇÃO DO DISPLAY
  lcd.clear();      // LIMPA O DISPLAY



  Serial.begin(9600);
  // Inicialização dos pinos
  pinMode(ledVerm, OUTPUT);
  pinMode(ledAmarelo, OUTPUT);
  pinMode(ledVerd, OUTPUT);
  pinMode(buzzerPino, OUTPUT);
  pinMode(releBomba, OUTPUT);
  pinMode(releSirene, OUTPUT);


  // Configura os botões como entrada com resistor de pull-up
  pinMode(botaoVerm, INPUT_PULLUP);
  pinMode(botaoVerd, INPUT_PULLUP);
  /*pinMode(botaoPreto, INPUT);
  pinMode(botaoVermelho, INPUT);
  pinMode(botaoIni, INPUT_PULLUP);*/
}


void loop() {

  // Leitura dos botões para selecionar o modo de jogo
  digitalWrite(ledAmarelo, HIGH);
  digitalWrite(ledVerm, LOW);
  digitalWrite(ledVerd, LOW);
  digitalWrite(releSirene, HIGH);  // deixar a sirene desativada

  valorTempoJogo = 0;  // Reinicia a variável de tempo do jogo

  if (millis() - buzzerMenu >= 500) {  // ativa o buzzer para dizer que o jogo esta rolando
    buzzerEstado = !buzzerEstado;
    buzzerEstado = buzzerEstado ? HIGH : LOW;
    digitalWrite(buzzerPino, buzzerEstado);  //Alteração cíclica do estado do pino
    buzzerMenu = millis();
  }

  Serial.println("menu");  //-- para debug
  lcd.setCursor(0, 0);
  lcd.print("   MENU BOMBA   ");  //para lcd
  lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2
  lcd.print("                ");

  char tecla_pressionada = teclado1.getKey();  //Verifica se alguma tecla foi pressionada

  if (tecla_pressionada == 'A') {  // Seleciona o modo de jogo Padrao
gotoPadrao:

    valorTempoJogo = 0;
    valorTempoBomba = 0;
    lcd.clear();
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVerm, HIGH);
    tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
    delay(100);              // Duração do som positivo
    noTone(buzzerPino);      // Desliga o som
    delay(500);
    digitalWrite(ledVerm, LOW);
    Serial.println("mode padrao");  //-- para debug
    lcd.setCursor(0, 0);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print("   mode padrao  ");  //para lcd
    lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print("Tempo Rodada:");
    while (1) {
      char totalGame = teclado1.getKey();  //pra pegar o tempo total do game padrao
      if (totalGame) {
        lcd.print(totalGame);
        tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
        delay(100);              // Duração do som positivo
        noTone(buzzerPino);      // Desliga o som
        if (totalGame >= '0' && totalGame <= '9') {
          valorTempoJogo = valorTempoJogo * 10 + (totalGame - '0');
        } else if (totalGame == '*') {

          while (1) {

            lcd.setCursor(0, 0);
            lcd.print("Serao ");
            lcd.print(valorTempoJogo);
            Serial.println(valorTempoJogo);
            lcd.print(" Min?    ");
            lcd.setCursor(0, 1);
            lcd.print("* SIM  |  # NAO ");
            tecla_pressionada = teclado1.getKey();
            if (tecla_pressionada == 'D') {
              Serial.println("menu");  //-- para debug
              return 1;                // funcao mestre para voltar para o menu iniciar
            } else if (tecla_pressionada == '*') {

              tone(buzzerPino, 1000);         // Frequência do som positivo debug para dizer que iniciou o game
              delay(100);                     // Duração do som positivo
              noTone(buzzerPino);             // Desliga o som
              lcd.setCursor(0, 0);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
              lcd.print("   mode padrao  ");  //para lcd
              lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
              lcd.print("Tempo  Bomba:   ");
              while (1) {                             //para pegar o tempo da bomba
                char totalBomba = teclado1.getKey();  //pra pegar o tempo total da bomba no modo padrao
                if (totalBomba) {
                  lcd.setCursor(13, 1);
                  lcd.print(totalBomba);

                  tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
                  delay(100);              // Duração do som positivo
                  noTone(buzzerPino);      // Desliga o som
                  if (totalBomba >= '0' && totalBomba <= '9') {
                    valorTempoBomba = valorTempoBomba * 10 + (totalBomba - '0');
                  } else if (totalGame == '*') {
                    while (1) {
                      lcd.setCursor(0, 0);
                      lcd.print("Serao ");
                      lcd.print(valorTempoBomba);
                      Serial.println(valorTempoBomba);
                      lcd.print(" Min?    ");
                      lcd.setCursor(0, 1);
                      lcd.print("* SIM  |  # NAO ");
                      tecla_pressionada = teclado1.getKey();
                      if (tecla_pressionada == 'D') {
                        Serial.println("menu");  //-- para debug
                        return 1;                // funcao mestre para voltar para o menu iniciar
                      } else if (tecla_pressionada == '*') {
                        tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
                        delay(250);              // Duração do som positivo
                        noTone(buzzerPino);      // Desliga o som
                        duracaoPressao = 0;
                        modoPadrao(valorTempoJogo, valorTempoBomba);
                      } else if (tecla_pressionada == '#') {
                        goto gotoPadrao;
                      }
                    }
                  }
                }
              }

            } else if (tecla_pressionada == '#') {
              goto gotoPadrao;
            }
          }
        } else if (totalGame == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }
  }




  else if (tecla_pressionada == 'B') {  // Seleciona o modo de jogo Conquista
gotoConquista:
    valorTempoJogo = 0;
    lcd.clear();
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVerd, HIGH);
    tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
    delay(100);              // Duração do som positivo
    noTone(buzzerPino);      // Desliga o som
    delay(500);
    digitalWrite(ledVerd, LOW);
    Serial.println("mode conquista");  //-- para debug
    lcd.setCursor(0, 0);               // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print(" mode conquista ");     //para lcd
    lcd.setCursor(0, 1);               // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print("Tempo Rodada:");
    while (1) {
      char totalGame = teclado1.getKey();  //pra pegar o tempo total do game conquista
      if (totalGame) {
        lcd.print(totalGame);
        tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
        delay(100);              // Duração do som positivo
        noTone(buzzerPino);      // Desliga o som
        if (totalGame >= '0' && totalGame <= '9') {
          valorTempoJogo = valorTempoJogo * 10 + (totalGame - '0');
        } else if (totalGame == '*') {

          while (1) {
            lcd.setCursor(0, 0);
            lcd.print("Serao ");
            lcd.print(valorTempoJogo);
            Serial.println(valorTempoJogo);
            lcd.print(" Min?    ");
            lcd.setCursor(0, 1);
            lcd.print("* SIM  |  # NAO ");
            tecla_pressionada = teclado1.getKey();
            if (tecla_pressionada == 'D') {
              Serial.println("menu");  //-- para debug
              return 1;                // funcao mestre para voltar para o menu iniciar
            } else if (tecla_pressionada == '*') {
              tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
              delay(250);              // Duração do som positivo
              noTone(buzzerPino);      // Desliga o som
              modoConquista(valorTempoJogo);
            } else if (tecla_pressionada == '#') {
              goto gotoConquista;
            }
          }
        } else if (totalGame == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }
  }



  if (tecla_pressionada == 'C') {  // Seleciona o modo de jogo Padrao
gotoPadraoSenha:

    valorTempoJogo = 0;
    valorTempoBomba = 0;
    lcd.clear();
    digitalWrite(ledAmarelo, LOW);
    digitalWrite(ledVerm, HIGH);
    tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
    delay(100);              // Duração do som positivo
    noTone(buzzerPino);      // Desliga o som
    delay(500);
    digitalWrite(ledVerm, LOW);
    Serial.println("mode padrao");  //-- para debug
    lcd.setCursor(0, 0);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print("mode padraoSenha");  //para lcd
    lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
    lcd.print("Tempo Rodada:");
    while (1) {
      char totalGame = teclado1.getKey();  //pra pegar o tempo total do game padrao
      if (totalGame) {
        lcd.print(totalGame);
        tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
        delay(100);              // Duração do som positivo
        noTone(buzzerPino);      // Desliga o som
        if (totalGame >= '0' && totalGame <= '9') {
          valorTempoJogo = valorTempoJogo * 10 + (totalGame - '0');
        } else if (totalGame == '*') {

          while (1) {

            lcd.setCursor(0, 0);
            lcd.print("Serao ");
            lcd.print(valorTempoJogo);
            Serial.println(valorTempoJogo);
            lcd.print(" Min?    ");
            lcd.setCursor(0, 1);
            lcd.print("* SIM  |  # NAO ");
            tecla_pressionada = teclado1.getKey();
            if (tecla_pressionada == 'D') {
              Serial.println("menu");  //-- para debug
              return 1;                // funcao mestre para voltar para o menu iniciar
            } else if (tecla_pressionada == '*') {

              tone(buzzerPino, 1000);         // Frequência do som positivo debug para dizer que iniciou o game
              delay(100);                     // Duração do som positivo
              noTone(buzzerPino);             // Desliga o som
              lcd.setCursor(0, 0);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
              lcd.print("mode padraoSenha");  //para lcd
              lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
              lcd.print("Tempo  Bomba:   ");
              while (1) {                             //para pegar o tempo da bomba
                char totalBomba = teclado1.getKey();  //pra pegar o tempo total da bomba no modo padrao
                if (totalBomba) {
                  lcd.setCursor(13, 1);
                  lcd.print(totalBomba);

                  tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
                  delay(100);              // Duração do som positivo
                  noTone(buzzerPino);      // Desliga o som
                  if (totalBomba >= '0' && totalBomba <= '9') {
                    valorTempoBomba = valorTempoBomba * 10 + (totalBomba - '0');
                  } else if (totalGame == '*') {
                    while (1) {
                      lcd.setCursor(0, 0);
                      lcd.print("Serao ");
                      lcd.print(valorTempoBomba);
                      Serial.println(valorTempoBomba);
                      lcd.print(" Min?    ");
                      lcd.setCursor(0, 1);
                      lcd.print("* SIM  |  # NAO ");
                      tecla_pressionada = teclado1.getKey();
                      if (tecla_pressionada == 'D') {
                        Serial.println("menu");  //-- para debug
                        return 1;                // funcao mestre para voltar para o menu iniciar
                      } else if (tecla_pressionada == '*') {
                        tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
                        delay(250);              // Duração do som positivo
                        noTone(buzzerPino);      // Desliga o som
                        duracaoPressao = 0;
                        modoPadraoSenha(valorTempoJogo, valorTempoBomba);
                      } else if (tecla_pressionada == '#') {
                        goto gotoPadraoSenha;
                      }
                    }
                  }
                }
              }

            } else if (tecla_pressionada == '#') {
              goto gotoPadraoSenha;
            }
          }
        } else if (totalGame == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }
  }
}




// Lógica do Modo Padrão
void modoPadrao(int valorTempoJogo, int valorTempoBomba) {
  digitalWrite(ledAmarelo, HIGH);
  digitalWrite(ledVerm, HIGH);
  digitalWrite(ledVerd, HIGH);
  delay(300);
  digitalWrite(ledAmarelo, LOW);
  digitalWrite(ledVerm, LOW);
  digitalWrite(ledVerd, LOW);

  tempoInicioJogo = millis();  //para zerar o millis e contar o tempo maximo corretamente
  lcd.clear();
  tempoMillisLcd = millis();

  while (1 == 1) {

    if (millis() - tempoLed >= 1000) {  // faz piscar o led para dizer que o jogo esta rolando
      estadoLed = !estadoLed;
      digitalWrite(ledVerd, !estadoLed);
      tempoLed = millis();
    }



    if (millis() - tempoJogo >= 1000) {  // para atualizar o tempo para fim do game no lcd

      lcd.setCursor(0, 0);
      lcd.print("Tmp");
      lcd.print(valorTempoJogo);
      lcd.print("MIN");
      lcd.setCursor(9, 0);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
      tempoJogo = millis() - tempoInicioJogo;
      lcd.print((tempoJogo / 1000) / 60);  //minuto no lcd
      lcd.setCursor(11, 0);
      lcd.print(":");
      lcd.print(tempoJogo / 1000);  //segundo no lcd -- esta errado -- nao zera no segundo 60 fodase





      if ((tempoJogo / 1000) / 60 == valorTempoJogo) {
        Serial.println("CT WIN!");  //para debug
        Serial.println("Bomba nao ativa");

        lcd.setCursor(0, 0);
        lcd.print("CT WIN!          ");
        lcd.setCursor(0, 1);
        lcd.print("Bomba nao ativa");
        lcd.backlight();                 // liga a luminacao do display
        digitalWrite(releSirene, LOW);   //ativa a sirene
        delay(3000);                     //sirene toca por 3 segundos
        digitalWrite(releSirene, HIGH);  //desativa a sirene

        for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
          tone(buzzerPino, melody1[i], noteDuration1);
          delay(50);
          noTone(buzzerPino);
          delay(50);
        }

        while (1) {
          tecla_pressionada = teclado1.getKey();
          if (tecla_pressionada == 'D') {
            Serial.println("menu");  //-- para debug

            return 1;  // funcao mestre para voltar para o menu iniciar
          }
        }
      }
    }


    tecla_pressionada = teclado1.getKey();
    if (tecla_pressionada == 'D') {
      lcd.backlight();                 // liga a luminacao do display
      Serial.println("menu");          //-- para debug
      digitalWrite(releSirene, LOW);   //ativa a sirene
      delay(1000);                     //sirene toca por 1 segundo para sinalizar o fim do game de forma manual
      digitalWrite(releSirene, HIGH);  //desativa a sirene
      return 1;                        // funcao mestre para voltar para o menu iniciar
    } else if (tecla_pressionada) {
      lcd.backlight();  // liga a luminacao do display
    }


    Serial.println(millis() - tempoMillisLcd);  //para debug do tempo do lcd
    if (millis() - tempoMillisLcd >= 60000) {   //se a bomba ficar 1min sem interação o display apaga a iluminação
      lcd.noBacklight();                        // desliga a iluminacao do display
      tempoMillisLcd = millis();
    }

    if (digitalRead(botaoVerd) == LOW) {  // para caso o CT vença sem o terror ativar a bomba
      lcd.backlight();                    // liga a luminacao do display
      digitalWrite(ledVerm, LOW);
      digitalWrite(ledVerd, HIGH);
      Serial.println("CT Win");
      Serial.println("Bomba Inutilizada");
      lcd.setCursor(0, 0);
      lcd.print("   CT Win       ");  //para lcd
      lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
      lcd.print("BombaInutilizada");
      digitalWrite(releSirene, LOW);   //ativa a sirene
      delay(3000);                     //sirene toca por 3 segundos
      digitalWrite(releSirene, HIGH);  //desativa a sirene

      for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
        tone(buzzerPino, melody1[i], noteDuration1);
        delay(50);
        noTone(buzzerPino);
        delay(50);
      }


      while (1) {
        tecla_pressionada = teclado1.getKey();
        if (tecla_pressionada == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }

    int estadoBotao = digitalRead(botaoVerm);

    // Verifica se o botão foi pressionado (transição de HIGH para LOW) para começar a calcular para a ativação da bomba
    if (estadoBotao == LOW && !botaoPressionado) {
      tempoInicio = millis();  // Armazena o tempo de início da pressão
      botaoPressionado = true;
      Serial.println("Botão pressionado");  // Para debug
      lcd.backlight();                      // Liga a iluminação do display
    }

    if (estadoBotao == LOW) {                   // para mostrar no lcd a barra de carregamento
      duracaoPressao = millis() - tempoInicio;  // Calcula a duração da pressão
      lcd.setCursor(0, 1);

      int numBlocks = map(duracaoPressao, 0, 10000, 0, 16);

      // Desenha a barra de carregamento
      for (int i = 0; i < 16; i++) {  // imprime os quadrados sendo carregados
        if (i < numBlocks) {
          lcd.print(char(256));
        } else {
          lcd.print(" ");
        }
      }
    } else {
      lcd.setCursor(0, 1);
      lcd.print("                ");
    }



    // Verifica se o botão foi liberado
    if (estadoBotao == HIGH && botaoPressionado) {
      duracaoPressao = millis() - tempoInicio;  // Calcula a duração da pressão
      botaoPressionado = false;
      lcd.setCursor(1, 14);


      if (duracaoPressao >= 10000) {  // Se a duração da pressão for >= a 10 segundos ativa a bomba
        lcd.backlight();              // liga a luminacao do display
        digitalWrite(ledVerd, LOW);
        digitalWrite(ledAmarelo, LOW);

        tone(buzzerPino, 800);
        delay(400);
        noTone(buzzerPino);
        Serial.print("bomba ativa");  //-- para debug
        lcd.setCursor(0, 0);
        lcd.print("  Bomba Ativa   ");  //para lcd
        lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

        tempoinicioBomba = millis();  // para zerar o millis e contar os 15 segundos corretamente
        tempoMillisLcd = millis();    // para zerar o millis e contar o tempo de apagar o lcd corretamente
        tempoBomba = 0;

        digitalWrite(releSirene, LOW);   //ativa a sirene
        delay(1500);                     //sirene toca por 1,5 segundos para sinalizar a ativacao da bomba
        digitalWrite(releSirene, HIGH);  //desativa a sirene

        while (1 == 1) {  //Pós bomba ativada

          Serial.println(millis() - tempoMillisLcd);  //para debug do tempo do lcd
          if (millis() - tempoMillisLcd >= 60000) {   //se a bomba ficar 1min sem interação o display apaga a iluminação
            lcd.noBacklight();                        // desliga a iluminacao do display
            tempoMillisLcd = millis();
          }

          if (millis() - tempoLed >= 1000) {  // faz piscar o led mais rapido para dizer que a bomba esta ativa
            estadoLed = !estadoLed;
            digitalWrite(ledVerm, !estadoLed);
            tempoLed = millis();
            tone(buzzerPino, 1500);  // Frequência do som positivo debug para dizer que iniciou o game
            delay(50);               // Duração do som positivo
            noTone(buzzerPino);      // Desliga o som
            delay(50);
          }

          tecla_pressionada = teclado1.getKey();
          if (tecla_pressionada == 'D') {
            lcd.backlight();         // liga a luminacao do display
            Serial.println("menu");  //-- para debug
            return 1;                // funcao mestre para voltar para o menu iniciar
          } else if (tecla_pressionada || digitalRead(botaoVerm) == LOW) {
            lcd.backlight();  // liga a luminacao do display
          }

          tempoBomba = millis() - tempoinicioBomba;  // contagem pra explodir

          Serial.print("Tempo para explodir: ");  //-- para debug do tempo da bomba
          Serial.println(tempoBomba);             //-- para debug do tempo da bomba

          lcd.setCursor(0, 0);
          lcd.print("Explosao em ");  //para lcd
          lcd.print(valorTempoBomba);
          lcd.print("MI");
          lcd.setCursor(0, 1);
          lcd.print("       ");
          lcd.print(tempoBomba / 1000 / 60);
          lcd.print("        ");



          if (digitalRead(botaoVerd) == LOW) {  // para desarmar a bomba
            lcd.backlight();                    // liga a luminacao do display
            digitalWrite(ledVerm, LOW);
            digitalWrite(ledVerd, HIGH);
            for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
              tone(buzzerPino, melody1[i], noteDuration1);
              delay(50);
              noTone(buzzerPino);
              delay(50);
            }

            Serial.println("A bomba foi defusada");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("CT WIN!          ");
            lcd.setCursor(0, 1);
            lcd.print("Bomba defusada");
            lcd.setCursor(0, 1);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(3000);                     //sirene toca por 3 segundos
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }

          else if ((tempoBomba / 1000) / 60 >= valorTempoBomba) {
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            lcd.backlight();                     // liga a luminacao do display
            Serial.println("A bomba explodiu");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("A Bomba Explodiu");  //para lcd
            lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
            lcd.print("   Terror WIN   ");

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(6000);                     //sirene toca por 6 segundos para sinalizar que a bomba explodiu
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }
        }
      }
    }

    // lcd.setCursor(14, 1);
    // lcd.print(duracaoPressao / 1000);  //imprime no lcd o tempo que esta sendo pressionado o botao vermelho
    // Imprime a duração no Monitor Serial caso nao tenha pressionado o tempo necessário -- para debug
    Serial.print("Duração da pressão: ");
    Serial.print(duracaoPressao);
    Serial.println(" milissegundos");
  }
}


// Lógica do Modo Conquista
void modoConquista(int valorTempoJogo) {

  digitalWrite(ledAmarelo, HIGH);
  digitalWrite(ledVerm, HIGH);
  digitalWrite(ledVerd, HIGH);
  delay(300);
  digitalWrite(ledAmarelo, LOW);
  digitalWrite(ledVerm, LOW);
  digitalWrite(ledVerd, LOW);
  duracaoPressao1 = 0;
  duracaoPressao2 = 0;
  resulVerd = 0;
  resulVerm = 0;
  tempoInicioJogo = millis();  //para zerar o millis e contar o tempo maximo corretamente
  tempoMillisLcd = millis();
  lcd.clear();

  while (1 == 1) {

    if (millis() - tempoMillisLcd >= 60000) {  //se a bomba ficar 1min sem interação o display apaga a iluminação
      lcd.noBacklight();                       // desliga a iluminacao do display
      tempoMillisLcd = millis();
    }

    tecla_pressionada = teclado1.getKey();


    if (millis() - tempoJogo >= 1000) {  // para atualizar o tempo para fim do game no lcd

      lcd.setCursor(0, 0);
      lcd.print("Tempo MAX ");
      lcd.print(valorTempoJogo);
      lcd.print("MIN");
      lcd.setCursor(0, 1);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
      tempoJogo = millis() - tempoInicioJogo;
      Serial.println(tempoInicioJogo);
      lcd.print((tempoJogo / 1000) / 60);  //minuto no lcd
      lcd.print(":");
      lcd.print(tempoJogo / 1000);  //segundo no lcd -- esta errado -- nao zera no segundo 60 fodase

      if ((tempoJogo / 1000) / 60 == valorTempoJogo) {
        lcd.backlight();  // liga a luminacao do display
        Serial.println("Fim do tempo");




        lcd.setCursor(0, 0);
        lcd.print("  FIM DE GAME   ");
        lcd.setCursor(0, 1);
        lcd.print("                ");
        while (1) {


          digitalWrite(releSirene, LOW);   //ativa a sirene
          delay(3000);                     //sirene toca por 3 segundos para sinalizar o fim do game
          digitalWrite(releSirene, HIGH);  //desativa a sirene

          //tecla_pressionada = teclado1.getKey(); //se usar essa linha com a sirene, fica ruim para pressionar a tecla e ir para o resultado, precisará manter pressionado o botao D
          //if (tecla_pressionada == 'D') { //se usar essa linha com a sirene, fica ruim para pressionar a tecla e ir para o resultado, precisará manter pressionado o botao D
          while (1) {
            digitalWrite(ledVerd, LOW);
            digitalWrite(ledVerm, LOW);
            digitalWrite(ledAmarelo, LOW);

            Serial.println("     RESULTADO");  //-- para debug
            Serial.print("Time A: ");
            Serial.print(resulVerd);
            Serial.print("   ");
            Serial.print("Time B: ");
            Serial.println(resulVerm);
            for (int i = 0; i < 8; i++) {  // reprodução da melodia 1 para dar o resultado
              tone(buzzerPino, melody1[i], noteDuration1);
              delay(50);
              noTone(buzzerPino);
              delay(50);
            }
            if (resulVerm > resulVerd) {
              digitalWrite(ledVerm, HIGH);
              Serial.println("Time B GANHOU!");
              lcd.setCursor(0, 0);
              lcd.print("    RESULTADO   ");
              lcd.setCursor(0, 1);
              lcd.print("Time B Ganhou!!");
            } else if (resulVerm < resulVerd) {
              digitalWrite(ledVerd, HIGH);
              lcd.setCursor(0, 0);
              lcd.print("    RESULTADO   ");
              lcd.setCursor(0, 1);
              Serial.println("Time A Ganhou!!");
              lcd.print("Time A Ganhou!!");
            } else {
              digitalWrite(ledVerd, HIGH);
              digitalWrite(ledVerm, HIGH);
              Serial.println("EMPATE!");
              lcd.setCursor(0, 1);
              lcd.print("     EMPATE     ");
            }


            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }
        }
      }
    }

    if (tecla_pressionada || digitalRead(botaoVerm) == LOW || digitalRead(botaoVerd) == LOW) {  //vai ver se algum botao foi pressionado para acender o lcd
      lcd.backlight();                                                                          // liga a luminacao do display
    }



    if (millis() - tempoLed >= 1000) {  // faz piscar o led para dizer que o jogo esta rolando
      estadoLed = !estadoLed;
      digitalWrite(ledVerm, !estadoLed);
      tempoLed = millis();
    }
    resulVerm = resulVerm + duracaoPressao1;
    resulVerd = resulVerd + duracaoPressao2;

    if (tecla_pressionada == 'D') {
      lcd.backlight();  // liga a luminacao do display
      digitalWrite(ledVerd, LOW);
      digitalWrite(ledVerm, LOW);
      digitalWrite(ledAmarelo, LOW);




      Serial.println("     RESULTADO");  //-- para debug
      Serial.print("Time A: ");
      Serial.print(resulVerd);
      Serial.print("   ");
      Serial.print("Time B: ");
      Serial.println(resulVerm);
      for (int i = 0; i < 8; i++) {  // reprodução da melodia 1 para dar o resultado
        tone(buzzerPino, melody1[i], noteDuration1);
        delay(50);
        noTone(buzzerPino);
        delay(50);
      }
      if (resulVerm > resulVerd) {
        digitalWrite(ledVerm, HIGH);
        Serial.println("Time B GANHOU!");
        lcd.setCursor(0, 0);
        lcd.print("    RESULTADO   ");
        lcd.setCursor(0, 1);
        lcd.print("Time B Ganhou!!");
      } else if (resulVerm < resulVerd) {
        digitalWrite(ledVerd, HIGH);
        Serial.println("Time A GANHOU!");
        lcd.setCursor(0, 0);
        lcd.print("    RESULTADO   ");
        lcd.setCursor(0, 1);
        lcd.print("Time A Ganhou!!");
      } else {
        digitalWrite(ledVerd, HIGH);
        digitalWrite(ledVerm, HIGH);
        Serial.println("EMPATE!");
        lcd.setCursor(0, 1);
        lcd.print("     EMPATE     ");
      }

      digitalWrite(releSirene, LOW);   //ativa a sirene
      delay(1000);                     //sirene toca por 1 segundos para sinalizar o fim do game de forma manual
      digitalWrite(releSirene, HIGH);  //desativa a sirene

      while (1) {
        tecla_pressionada = teclado1.getKey();
        if (tecla_pressionada == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }


    int estadoBotao1 = digitalRead(botaoVerm);
    int estadoBotao2 = digitalRead(botaoVerd);
    // Verifica se o botão do time A foi pressionado (transição de HIGH para LOW) para começar a calcular que ficou precionado
    if (estadoBotao1 == LOW && !botaoPressionado1) {
      tempoInicio1 = millis();  // Armazena o tempo de início da pressão
      botaoPressionado1 = true;
      Serial.println("Botão pressionado B");  //-- para debug
      lcd.setCursor(13, 1);
      lcd.println("RED");
    }
    if (estadoBotao1 == LOW || estadoBotao2 == LOW) {  //Para fazer barulho ao pressionar um dos dois botoes
      tone(buzzerPino, 800);                           // Frequência do som positivo debug para dizer que iniciou o game
      delay(500);                                      // Duração do som positivo
      noTone(buzzerPino);                              // Desliga o som
      delay(500);
    }
    // Verifica se o botão foi liberado (transição de LOW para HIGH)
    if (estadoBotao1 == HIGH && botaoPressionado1) {
      duracaoPressao1 = millis() - tempoInicio1;  // Calcula a duração da pressão
      botaoPressionado1 = false;
      lcd.setCursor(13, 1);
      lcd.print("   ");
    }
    if (estadoBotao2 == LOW && !botaoPressionado2) {
      tempoInicio2 = millis();  // Armazena o tempo de início da pressão
      botaoPressionado2 = true;
      Serial.println("Botão pressionado A");  //-- para debug
      lcd.setCursor(11, 1);
      lcd.println("GREEN");
    }
    // Verifica se o botão foi liberado (transição de LOW para HIGH)
    if (estadoBotao2 == HIGH && botaoPressionado2) {
      duracaoPressao2 = millis() - tempoInicio2;  // Calcula a duração da pressão
      botaoPressionado2 = false;
      lcd.setCursor(11, 1);
      lcd.print("     ");
    }
  }
}

// Lógica do Modo Padrão com SENHA
void modoPadraoSenha(int valorTempoJogo, int valorTempoBomba) {
  digitalWrite(ledAmarelo, HIGH);
  digitalWrite(ledVerm, HIGH);
  digitalWrite(ledVerd, HIGH);
  delay(300);
  digitalWrite(ledAmarelo, LOW);
  digitalWrite(ledVerm, LOW);
  digitalWrite(ledVerd, LOW);

  tempoInicioJogo = millis();  //para zerar o millis e contar o tempo maximo corretamente
  lcd.clear();
  tempoMillisLcd = millis();
  senhaAtiva = 0;

  while (1 == 1) {

    if (millis() - tempoLed >= 1000) {  // faz piscar o led para dizer que o jogo esta rolando
      estadoLed = !estadoLed;
      digitalWrite(ledVerd, !estadoLed);
      tempoLed = millis();
    }



    if (millis() - tempoJogo >= 1000) {  // para atualizar o tempo para fim do game no lcd

      lcd.setCursor(0, 0);
      lcd.print("Tmp");
      lcd.print(valorTempoJogo);
      lcd.print("MIN");
      lcd.setCursor(9, 0);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
      tempoJogo = millis() - tempoInicioJogo;
      lcd.print((tempoJogo / 1000) / 60);  //minuto no lcd
      lcd.setCursor(11, 0);
      lcd.print(":");
      lcd.print(tempoJogo / 1000);  //segundo no lcd -- esta errado -- nao zera no segundo 60 fodase
      lcd.setCursor(0, 1);
      lcd.print("SENHA:  ");





      if ((tempoJogo / 1000) / 60 == valorTempoJogo) {
        Serial.println("CT WIN!");  //para debug
        Serial.println("Bomba nao ativa");

        lcd.setCursor(0, 0);
        lcd.print("CT WIN!          ");
        lcd.setCursor(0, 1);
        lcd.print("Bomba nao ativa");
        lcd.backlight();                 // liga a luminacao do display
        digitalWrite(releSirene, LOW);   //ativa a sirene
        delay(3000);                     //sirene toca por 3 segundos
        digitalWrite(releSirene, HIGH);  //desativa a sirene

        for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
          tone(buzzerPino, melody1[i], noteDuration1);
          delay(50);
          noTone(buzzerPino);
          delay(50);
        }

        while (1) {
          tecla_pressionada = teclado1.getKey();
          if (tecla_pressionada == 'D') {
            Serial.println("menu");  //-- para debug

            return 1;  // funcao mestre para voltar para o menu iniciar
          }
        }
      }
    }
    //#################################################



    tecla_pressionada = teclado1.getKey();
    if (tecla_pressionada == 'D') {
      lcd.backlight();                 // liga a luminacao do display
      Serial.println("menu");          //-- para debug
      digitalWrite(releSirene, LOW);   //ativa a sirene
      delay(1000);                     //sirene toca por 1 segundo para sinalizar o fim do game de forma manual
      digitalWrite(releSirene, HIGH);  //desativa a sirene
      return 1;                        // funcao mestre para voltar para o menu iniciar
    } else if (tecla_pressionada) {
      lcd.backlight();         // liga a luminacao do display
      tone(buzzerPino, 1000);  // Frequência do som positivo debug para dizer que iniciou o game
      delay(100);              // Duração do som positivo
      noTone(buzzerPino);      // Desliga o som

      if (tecla_pressionada >= '0' && tecla_pressionada <= '9') {  //verifica se a tecla pressionada é um numero de 0 a 9
        senhaAtiva = senhaAtiva * 10 + (tecla_pressionada - '0');
        for (int i = 0; i < 8; ++i) {  // Utiliza um loop para imprimir os dígitos
          lcd.print((senhaAtiva / int(pow(10, 7 - i))) % 10);
        }
      }

      lcd.print(tecla_pressionada);
      if (senhaAtiva == senha) {  // se a senha estiver correta, ativa a bomba
        lcd.backlight();          // liga a luminacao do display
        digitalWrite(ledVerd, LOW);
        digitalWrite(ledAmarelo, LOW);

        tone(buzzerPino, 800);
        delay(400);
        noTone(buzzerPino);
        Serial.print("bomba ativa");  //-- para debug
        lcd.setCursor(0, 0);
        lcd.print("  Bomba Ativa   ");  //para lcd
        lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

        tempoinicioBomba = millis();  // para zerar o millis e contar o tempo corretamente
        tempoMillisLcd = millis();    // para zerar o millis e contar o tempo de apagar o lcd corretamente
        tempoBomba = 0;

        digitalWrite(releSirene, LOW);   //ativa a sirene
        delay(1500);                     //sirene toca por 1,5 segundos para sinalizar a ativacao da bomba
        digitalWrite(releSirene, HIGH);  //desativa a sirene

        while (1 == 1) {  //Pós bomba ativada

          Serial.println(millis() - tempoMillisLcd);  //para debug do tempo do lcd
          if (millis() - tempoMillisLcd >= 60000) {   //se a bomba ficar 1min sem interação o display apaga a iluminação
            lcd.noBacklight();                        // desliga a iluminacao do display
            tempoMillisLcd = millis();
          }

          if (millis() - tempoLed >= 1000) {  // faz piscar o led
            estadoLed = !estadoLed;
            digitalWrite(ledVerm, !estadoLed);
            tempoLed = millis();
            tone(buzzerPino, 1500);  // Frequência do som positivo debug para dizer que iniciou o game
            delay(50);               // Duração do som positivo
            noTone(buzzerPino);      // Desliga o som
            delay(50);
          }

          tecla_pressionada = teclado1.getKey();
          if (tecla_pressionada == 'D') {
            lcd.backlight();         // liga a luminacao do display
            Serial.println("menu");  //-- para debug
            return 1;                // funcao mestre para voltar para o menu iniciar
          } else if (tecla_pressionada || digitalRead(botaoVerm) == LOW) {
            lcd.backlight();  // liga a luminacao do display
          }

          tempoBomba = millis() - tempoinicioBomba;  // contagem pra explodir

          Serial.print("Tempo para explodir: ");  //-- para debug do tempo da bomba
          Serial.println(tempoBomba);             //-- para debug do tempo da bomba

          lcd.setCursor(0, 0);
          lcd.print("Explosao em ");  //para lcd
          lcd.print(valorTempoBomba);
          lcd.print("MI");
          lcd.setCursor(0, 1);
          lcd.print("       ");
          lcd.print(tempoBomba / 1000 / 60);
          lcd.print("        ");



          if (digitalRead(botaoVerd) == LOW) {  // para desarmar a bomba
            lcd.backlight();                    // liga a luminacao do display
            digitalWrite(ledVerm, LOW);
            digitalWrite(ledVerd, HIGH);
            for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
              tone(buzzerPino, melody1[i], noteDuration1);
              delay(50);
              noTone(buzzerPino);
              delay(50);
            }

            Serial.println("A bomba foi defusada");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("CT WIN!          ");
            lcd.setCursor(0, 1);
            lcd.print("Bomba defusada");
            lcd.setCursor(0, 1);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(3000);                     //sirene toca por 3 segundos
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }

          else if ((tempoBomba / 1000) / 60 >= valorTempoBomba) {
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            lcd.backlight();                     // liga a luminacao do display
            Serial.println("A bomba explodiu");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("A Bomba Explodiu");  //para lcd
            lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
            lcd.print("   Terror WIN   ");

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(6000);                     //sirene toca por 6 segundos para sinalizar que a bomba explodiu
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }
        }

      } else if (contarDigitos(senhaAtiva) == 3) {  // caso a senha esteja incorreta
        tone(buzzerPino, 500, 300);
        senhaAtiva = 0;
        lcd.setCursor(8, 1);
        lcd.print("********");
        lcd.setCursor(8, 1);
      }
    }
    //    else if (tecla_pressionada) {
    //      lcd.backlight();  // liga a luminacao do display
    //    }



    //############################################################################



    Serial.println(millis() - tempoMillisLcd);  //para debug do tempo do lcd
    if (millis() - tempoMillisLcd >= 60000) {   //se a bomba ficar 1min sem interação o display apaga a iluminação
      lcd.noBacklight();                        // desliga a iluminacao do display
      tempoMillisLcd = millis();
    }

    if (digitalRead(botaoVerd) == LOW) {  // para caso o CT vença sem o terror ativar a bomba
      lcd.backlight();                    // liga a luminacao do display
      digitalWrite(ledVerm, LOW);
      digitalWrite(ledVerd, HIGH);
      Serial.println("CT Win");
      Serial.println("Bomba Inutilizada");
      lcd.setCursor(0, 0);
      lcd.print("   CT Win       ");  //para lcd
      lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
      lcd.print("BombaInutilizada");
      digitalWrite(releSirene, LOW);   //ativa a sirene
      delay(3000);                     //sirene toca por 3 segundos
      digitalWrite(releSirene, HIGH);  //desativa a sirene

      for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
        tone(buzzerPino, melody1[i], noteDuration1);
        delay(50);
        noTone(buzzerPino);
        delay(50);
      }


      while (1) {
        tecla_pressionada = teclado1.getKey();
        if (tecla_pressionada == 'D') {
          Serial.println("menu");  //-- para debug
          return 1;                // funcao mestre para voltar para o menu iniciar
        }
      }
    }

    /*int estadoBotao = digitalRead(botaoVerm);

    // Verifica se o botão foi pressionado (transição de HIGH para LOW) para começar a calcular para a ativação da bomba
    if (estadoBotao == LOW && !botaoPressionado) {
      tempoInicio = millis();  // Armazena o tempo de início da pressão
      botaoPressionado = true;
      Serial.println("Botão pressionado");  // Para debug
      lcd.backlight();                      // Liga a iluminação do display
    }

    if (estadoBotao == LOW) {                   // para mostrar no lcd a barra de carregamento
      duracaoPressao = millis() - tempoInicio;  // Calcula a duração da pressão
      lcd.setCursor(0, 1);

      int numBlocks = map(duracaoPressao, 0, 10000, 0, 16);

      // Desenha a barra de carregamento
      for (int i = 0; i < 16; i++) {  // imprime os quadrados sendo carregados
        if (i < numBlocks) {
          lcd.print(char(256));
        } else {
          lcd.print(" ");
        }
      }
    } else {
      lcd.setCursor(0, 1);
      lcd.print("                ");
    }



    // Verifica se o botão foi liberado
    if (estadoBotao == HIGH && botaoPressionado) {
      duracaoPressao = millis() - tempoInicio;  // Calcula a duração da pressão
      botaoPressionado = false;
      lcd.setCursor(1, 14);


      if (duracaoPressao >= 10000) {  // Se a duração da pressão for >= a 10 segundos ativa a bomba
        lcd.backlight();              // liga a luminacao do display
        digitalWrite(ledVerd, LOW);
        digitalWrite(ledAmarelo, LOW);

        tone(buzzerPino, 800);
        delay(400);
        noTone(buzzerPino);
        Serial.print("bomba ativa");  //-- para debug
        lcd.setCursor(0, 0);
        lcd.print("  Bomba Ativa   ");  //para lcd
        lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

        tempoinicioBomba = millis();  // para zerar o millis e contar os 15 segundos corretamente
        tempoMillisLcd = millis();    // para zerar o millis e contar o tempo de apagar o lcd corretamente
        tempoBomba = 0;

        digitalWrite(releSirene, LOW);   //ativa a sirene
        delay(1500);                     //sirene toca por 1,5 segundos para sinalizar a ativacao da bomba
        digitalWrite(releSirene, HIGH);  //desativa a sirene

        while (1 == 1) {  //Pós bomba ativada

          Serial.println(millis() - tempoMillisLcd);  //para debug do tempo do lcd
          if (millis() - tempoMillisLcd >= 60000) {   //se a bomba ficar 1min sem interação o display apaga a iluminação
            lcd.noBacklight();                        // desliga a iluminacao do display
            tempoMillisLcd = millis();
          }

          if (millis() - tempoLed >= 1000) {  // faz piscar o led mais rapido para dizer que a bomba esta ativa
            estadoLed = !estadoLed;
            digitalWrite(ledVerm, !estadoLed);
            tempoLed = millis();
            tone(buzzerPino, 1500);  // Frequência do som positivo debug para dizer que iniciou o game
            delay(50);               // Duração do som positivo
            noTone(buzzerPino);      // Desliga o som
            delay(50);
          }

          tecla_pressionada = teclado1.getKey();
          if (tecla_pressionada == 'D') {
            lcd.backlight();         // liga a luminacao do display
            Serial.println("menu");  //-- para debug
            return 1;                // funcao mestre para voltar para o menu iniciar
          } else if (tecla_pressionada || digitalRead(botaoVerm) == LOW) {
            lcd.backlight();  // liga a luminacao do display
          }

          tempoBomba = millis() - tempoinicioBomba;  // contagem pra explodir

          Serial.print("Tempo para explodir: ");  //-- para debug do tempo da bomba
          Serial.println(tempoBomba);             //-- para debug do tempo da bomba

          lcd.setCursor(0, 0);
          lcd.print("Explosao em ");  //para lcd
          lcd.print(valorTempoBomba);
          lcd.print("MI");
          lcd.setCursor(0, 1);
          lcd.print("       ");
          lcd.print(tempoBomba / 1000 / 60);
          lcd.print("        ");



          if (digitalRead(botaoVerd) == LOW) {  // para desarmar a bomba
            lcd.backlight();                    // liga a luminacao do display
            digitalWrite(ledVerm, LOW);
            digitalWrite(ledVerd, HIGH);
            for (int i = 0; i < 8; i++) {  // reprodução da melodia 1
              tone(buzzerPino, melody1[i], noteDuration1);
              delay(50);
              noTone(buzzerPino);
              delay(50);
            }

            Serial.println("A bomba foi defusada");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("CT WIN!          ");
            lcd.setCursor(0, 1);
            lcd.print("Bomba defusada");
            lcd.setCursor(0, 1);  // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(3000);                     //sirene toca por 3 segundos
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }

          else if ((tempoBomba / 1000) / 60 >= valorTempoBomba) {
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            for (int i = 100; i <= 3000; i += 50) {  // melodia para dizer que a bomba explodiu
              tone(buzzerPino, i);
              delay(10);
            }
            // Pausa
            noTone(buzzerPino);
            lcd.backlight();                     // liga a luminacao do display
            Serial.println("A bomba explodiu");  //-- para debug
            lcd.setCursor(0, 0);
            lcd.print("A Bomba Explodiu");  //para lcd
            lcd.setCursor(0, 1);            // POSICIONA O CURSOR NA PRIMEIRA COLUNA DA LINHA 2  //para lcd
            lcd.print("   Terror WIN   ");

            digitalWrite(releSirene, LOW);   //ativa a sirene
            delay(6000);                     //sirene toca por 6 segundos para sinalizar que a bomba explodiu
            digitalWrite(releSirene, HIGH);  //desativa a sirene

            while (1) {
              tecla_pressionada = teclado1.getKey();
              if (tecla_pressionada == 'D') {
                Serial.println("menu");  //-- para debug
                return 1;                // funcao mestre para voltar para o menu iniciar
              }
            }
          }
        }
      }
    }*/

    // lcd.setCursor(14, 1);
    // lcd.print(duracaoPressao / 1000);  //imprime no lcd o tempo que esta sendo pressionado o botao vermelho
    // Imprime a duração no Monitor Serial caso nao tenha pressionado o tempo necessário -- para debug
    Serial.print("Duração da pressão: ");
    Serial.print(duracaoPressao);
    Serial.println(" milissegundos");
  }
}


int contarDigitos(int numero) {  //FUNCAO PARA CONTAR OS DIGITOS DO MODO PADRAO COM SENHA
  if (numero == 0) {
    return 1;  // Se o número for zero, temos um dígito
  }

  int contagem = 0;
  while (numero != 0) {
    numero /= 10;
    contagem++;
  }

  return contagem;
}
